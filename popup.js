// Generated by CoffeeScript 1.6.3
(function() {
  var allCount, allVisits, drawGraph, fetchVisits, mills2weeks, objectToList, prepareData, processedItems, viz, viz2;

  mills2weeks = function(mil) {
    var days, hours, minutes, seconds, weeks;
    seconds = (mil / 1000) | 0;
    mil -= seconds * 1000;
    minutes = (seconds / 60) | 0;
    seconds -= minutes * 60;
    hours = (minutes / 60) | 0;
    minutes -= hours * 60;
    days = (hours / 24) | 0;
    hours -= days * 24;
    weeks = (days / 7) | 0;
    days -= weeks * 7;
    return weeks;
  };

  objectToList = function(p) {
    var arr, key, value;
    arr = [];
    for (key in p) {
      value = p[key];
      arr.push([parseInt(key), value]);
    }
    return arr;
  };

  allVisits = [];

  processedItems = 0;

  allCount = 0;

  fetchVisits = function(historyItem) {
    return chrome.history.getVisits(historyItem, function(visits) {
      console.log(visits);
      historyItem.visits = _.map(visits, function(el) {
        return el.visitTime;
      });
      allVisits.push(historyItem);
      processedItems++;
      if (processedItems === allCount) {
        return drawGraph();
      }
    });
  };

  drawGraph = function() {
    var json;
    console.log("draw");
    json = JSON.stringify(allVisits);
    console.log(json);
    return $("#json-text").text(json);
  };

  prepareData = function(urls) {
    var allWeeks, n, nRes, nnRes, res, res2;
    allCount = urls.length;
    _.each(urls, function(url) {
      return fetchVisits({
        url: url.url
      });
    });
    n = _.map(urls, function(el) {
      return parseUri(el.url).authority;
    });
    res = _.groupBy(n, function(el) {
      return el;
    });
    res2 = _.groupBy(urls, function(el) {
      return parseUri(el.url).authority;
    });
    allWeeks = [];
    nnRes = _.each(res2, function(el) {
      return _.each(el, function(elUrl) {
        var week;
        week = mills2weeks(elUrl.lastVisitTime);
        return allWeeks[week] = week;
      });
    });
    nnRes = _.map(res2, function(el) {
      var groupped;
      groupped = _.countBy(el, function(elUrl) {
        return mills2weeks(elUrl.lastVisitTime);
      });
      _.each(allWeeks, function(el) {
        if (_.isUndefined(groupped[el])) {
          return groupped[el] = 0;
        }
      });
      return {
        key: parseUri(el[0].url).authority,
        values: objectToList(groupped)
      };
    });
    nRes = _.map(res, function(t) {
      console.log(t[0]);
      return {
        label: t[0],
        value: t.length
      };
    });
    nRes = _.filter(nRes, function(el) {
      return el.value > 80;
    });
    nRes = _.sortBy(nRes, 'value');
    console.log(nRes);
    viz([
      {
        key: 'VizData',
        values: nRes
      }
    ]);
    return viz2(nnRes);
  };

  viz2 = function(data) {
    chart2;
    return nv.addGraph({
      generate: function() {
        var chart2;
        chart2 = nv.models.stackedArea().x(function(d) {
          return d[0];
        }).y(function(d) {
          return d[1];
        });
        d3.select('#chart2 svg').datum(data).call(chart2);
        nv.utils.windowResize(chart2.update);
        return chart2;
      }
    });
  };

  viz = function(data) {
    return nv.addGraph({
      generate: function() {
        var chart;
        chart = nv.models.discreteBarChart().x(function(d) {
          return d.label;
        }).y(function(d) {
          return d.value;
        }).staggerLabels(true).tooltips(false).showValues(true);
        d3.select('#chart svg').datum(data).attr({
          width: 1000,
          height: 500
        }).transition().duration(500).call(chart);
        nv.utils.windowResize(chart.update);
        return chart;
      },
      callback: function(graph) {
        return window.onResize = function() {
          var height, margin, width;
          width = nv.utils.windowSize().width - 20;
          height = nv.utils.windowSize().height - 20;
          margin = graph.margin();
          width = Math.max(width, margin.left + margin.right + 20);
          height = Math.max(height, margin.top + margin.bottom + 20);
          graph.width(width).height(height);
          return d3.select("#chart svg").attr("width", width).attr("height", height).call(graph);
        };
      }
    });
  };

  chrome.history.search({
    text: '',
    maxResults: 0,
    startTime: 0
  }, prepareData);

  document.addEventListener('DOMContentLoaded', function() {
    return $('#myTab a').click(function(e) {
      e.preventDefault();
      return $(this).tab('show');
    });
  });

}).call(this);

/*
//@ sourceMappingURL=popup.map
*/
